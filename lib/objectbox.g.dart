// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/post.dart';
import 'models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5615278486343574019),
    name: 'Post',
    lastPropertyId: const obx_int.IdUid(8, 105440590001780642),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6883133795020918287),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8099479341859343324),
        name: 'time',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5017858297717077232),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3954843406640317305),
        name: 'text',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2806779437078031470),
        name: 'image',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1887379303104564569),
        name: 'favorites',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1778513318569524827),
        name: 'userId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 2447916959769386065),
        relationTarget: 'User',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 105440590001780642),
        name: 'vaga',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 3666265614051319153),
        name: 'comments',
        targetId: const obx_int.IdUid(1, 5615278486343574019),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 6642526009498390053),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(5, 5919833295532526247),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 76954978785973572),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8349543860111960100),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 734317660995210634),
        name: 'password',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6530363204498889932),
        name: 'profilePicture',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 2089485398000816244),
        name: 'post',
        targetId: const obx_int.IdUid(1, 5615278486343574019),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 3687251440929884215),
        name: 'vagas',
        targetId: const obx_int.IdUid(1, 5615278486343574019),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 6642526009498390053),
    lastIndexId: const obx_int.IdUid(2, 2447916959769386065),
    lastRelationId: const obx_int.IdUid(3, 3687251440929884215),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [5850637367347217579],
    retiredPropertyUids: const [5919833295532526247],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Post: obx_int.EntityDefinition<Post>(
      model: _entities[0],
      toOneRelations: (Post object) => [object.user],
      toManyRelations: (Post object) => {
        obx_int.RelInfo<Post>.toMany(1, object.id): object.comments,
      },
      getId: (Post object) => object.id,
      setId: (Post object, int id) {
        object.id = id;
      },
      objectToFB: (Post object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final textOffset = fbb.writeString(object.text);
        final imageOffset = object.image == null
            ? null
            : fbb.writeString(object.image!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.time.millisecondsSinceEpoch);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, textOffset);
        fbb.addOffset(4, imageOffset);
        fbb.addInt64(5, object.favorites);
        fbb.addInt64(6, object.user.targetId);
        fbb.addBool(7, object.vaga);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final timeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final textParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final vagaParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          18,
          false,
        );
        final imageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final favoritesParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final object = Post(
          time: timeParam,
          title: titleParam,
          text: textParam,
          vaga: vagaParam,
          image: imageParam,
          favorites: favoritesParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.user.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.user.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Post>(
          object.comments,
          store,
          obx_int.RelInfo<Post>.toMany(1, object.id),
        );
        return object;
      },
    ),
    User: obx_int.EntityDefinition<User>(
      model: _entities[1],
      toOneRelations: (User object) => [],
      toManyRelations: (User object) => {
        obx_int.RelInfo<User>.toMany(2, object.id): object.post,
        obx_int.RelInfo<User>.toMany(3, object.id): object.vagas,
      },
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final passwordOffset = fbb.writeString(object.password);
        final profilePictureOffset = fbb.writeString(object.profilePicture);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, passwordOffset);
        fbb.addOffset(3, profilePictureOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final passwordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final profilePictureParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = User(
          name: nameParam,
          password: passwordParam,
          profilePicture: profilePictureParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.post,
          store,
          obx_int.RelInfo<User>.toMany(2, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.vagas,
          store,
          obx_int.RelInfo<User>.toMany(3, object.id),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Post] entity fields to define ObjectBox queries.
class Post_ {
  /// See [Post.id].
  static final id = obx.QueryIntegerProperty<Post>(_entities[0].properties[0]);

  /// See [Post.time].
  static final time = obx.QueryDateProperty<Post>(_entities[0].properties[1]);

  /// See [Post.title].
  static final title = obx.QueryStringProperty<Post>(
    _entities[0].properties[2],
  );

  /// See [Post.text].
  static final text = obx.QueryStringProperty<Post>(_entities[0].properties[3]);

  /// See [Post.image].
  static final image = obx.QueryStringProperty<Post>(
    _entities[0].properties[4],
  );

  /// See [Post.favorites].
  static final favorites = obx.QueryIntegerProperty<Post>(
    _entities[0].properties[5],
  );

  /// See [Post.user].
  static final user = obx.QueryRelationToOne<Post, User>(
    _entities[0].properties[6],
  );

  /// See [Post.vaga].
  static final vaga = obx.QueryBooleanProperty<Post>(
    _entities[0].properties[7],
  );

  /// see [Post.comments]
  static final comments = obx.QueryRelationToMany<Post, Post>(
    _entities[0].relations[0],
  );
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[1].properties[1]);

  /// See [User.password].
  static final password = obx.QueryStringProperty<User>(
    _entities[1].properties[2],
  );

  /// See [User.profilePicture].
  static final profilePicture = obx.QueryStringProperty<User>(
    _entities[1].properties[3],
  );

  /// see [User.post]
  static final post = obx.QueryRelationToMany<User, Post>(
    _entities[1].relations[0],
  );

  /// see [User.vagas]
  static final vagas = obx.QueryRelationToMany<User, Post>(
    _entities[1].relations[1],
  );
}
